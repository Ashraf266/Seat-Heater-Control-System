/*
 * app.c
 *
 *  Created on: Apr 14, 2024
 *      Author: Ashraf
 */



#include "app.h"
#include "app_private.h"
#include "Port.h"
#include "Dio.h"
#include "uart0.h"
#include "GPTM.h"
#include "adc.h"
#include "heater.h"
#include "lm35.h"
#include "FreeRTOS.h"
#include "task.h"
#include "event_groups.h"



/*******************************************************************************
 *                             Functions Definition                            *
 *******************************************************************************/

void APP_start(void)
{
    /* Start the scheduler */
    vTaskStartScheduler();
}



void APP_init(void)
{
    /* --------------Initialize the peripherals-------------- */

    /* Initialize Port */
    Port_Init(&Port_Configuration);

    /* Initialize Dio */
    Dio_Init(&Dio_Configuration);

    /* Initialize UART */
    UART0_Init();

    /* Initialize ADC */
    ADC0_EnableCLock();



    /* --------------Tasks Creation-------------- */







    xTaskCreate(vRunTimeMeasurementsTask, "Run time Measurements", 256, NULL, LOW_PRIORITY, NULL);

}















void vRunTimeMeasurementsTask(void *pvParameters)
{
    TickType_t xLastWakeTime = xTaskGetTickCount();
    static uint8 cRuntimeStatBuffer[ 512 ];
    for (;;)
    {
        vTaskDelayUntil(&xLastWakeTime, RUNTIME_MEASUREMENTS_TASK_PERIODICITY);

        vTaskGetRunTimeStats( cRuntimeStatBuffer );

        taskENTER_CRITICAL();
        UART0_SendString("\r\nTask\t\tAbs\t\t%%\r\n");
        UART0_SendString( "-------------------------------------------\r\n" );
        UART0_SendString( cRuntimeStatBuffer );
        taskEXIT_CRITICAL();

    }
}

